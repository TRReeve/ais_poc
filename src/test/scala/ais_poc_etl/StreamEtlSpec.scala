/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */
package ais_poc_etl
import ais_poc_etl.Entrypoint.session
import ais_poc_etl.validate.{AISValidation, AisMessage, AisMessageValidationFailure, Point}
import cats.data.Validated.{Invalid, Valid}
import org.scalatest.funsuite.AnyFunSuite


class StreamEtlSpec extends AnyFunSuite {

  val AisDataValidations = AISValidation.apply

  val test_row = "01/11/2018 00:07:51,Class A,220307000,56.949612,11.696835,Under way using engine,,1.3,47.5,,Unknown,OVYP,ANDREA KLITBO FN226,Fishing,,6,20,GPS,3.7,HJEM TIL TOESERNE,,AIS,15,5,2,4"
  val test_row_with_imo = "01/11/2018 00:01:39,Class A,248659000,54.846538,12.973048,Under way using engine,0.0,17.4,245.9,246,9745500,9HA4748,CMA CGM PREGOLIA,Cargo,No additional information,32,195,GPS,10.9,DEWVN,02/11/2018 14:00:00,AIS,183,12,30,2"

  test("Validates Timestamp and converts to milliseconds") {
    val input_string = "01/11/2018 00:07:51"
    val result = AisDataValidations.validateTimestamp(input_string)
    println(result)
    assert(result == Valid(1541030871000L))
  }

  test("Validate Point coords") {
    val to_point = AisDataValidations.validatePoint("54.694377","10.16485")
    assert(to_point == Valid(Point(54.694377,10.16485)))
  }

  test("Validate IMO Number fails on garbage and replaces with None for Unknown") {
    val invalid_case = AisDataValidations.validateImoNumber("Unknown")
    val valid_case = AisDataValidations.validateImoNumber("9745500")
    val failing_case = AisDataValidations.validateImoNumber("garbage")
    assert(invalid_case == Valid(None))
    assert(valid_case == Valid(Some(9745500L)))
    assert(failing_case.isInstanceOf[Invalid[AisMessageValidationFailure]])
  }

  test("Parse and Validate csv row") {

    val to_row = AisDataValidations.parseAisMessage(test_row_with_imo)
    val to_row_no_imo = AisDataValidations.parseAisMessage(test_row)
    println(to_row_no_imo)
    println(to_row)
    assert(to_row_no_imo == Valid(AisMessage(1541030871000L,"Class A",220307000,Point(56.949612,11.696835),"Under way using engine","Fishing",None)))
    assert(to_row == Valid(AisMessage(1541030499000L,"Class A",248659000,Point(54.846538,12.973048),"Under way using engine","Cargo",Some(9745500L)))

      )

  }
}
